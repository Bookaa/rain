import core

let length = core.length

let values = func(self)
  let i = 0
  return func()
    save self[i]
    i = i + 1

let keys = func(self)
  let i = 0
  return func()
    if self[i] == null
      return

    save i
    i = i + 1

let map = func(self, fn)
  let ret = table from self.metatable
  save ret
  for i in keys(self)
    ret[i] = fn(self[i])

let foldl = func(self, fn, z)
  let a = z
  for v in values(self)
    a = fn(a, v)
  return a

let from_iter = func(iter)
  let ret = table
  save ret
  let idx = 0
  for i in iter
    ret[idx] = i
    idx = idx + 1

let slice = func(self, start, end)
  let ret = table
  save ret
  let length = length(self)
  let to_idx = 0
  let from_idx = start
  while from_idx < end
    ret[to_idx] = self[from_idx]
    from_idx = from_idx + 1
    to_idx = to_idx + 1

export length
export values
export keys
export map
export foldl
export from_iter
export slice
