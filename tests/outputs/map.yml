!program;1
stmts:
- !import;1
  name: types/array
  rename: null
- !import;1
  name: iter
  rename: null
- !assn;2
  export: false
  let: true
  lhs: !name;1
    value: double
  rhs: !func;1
    body: !return;1
      value: !binary;1
        lhs: !name;1
          value: n
        op: '*'
        rhs: !int;1
          value: 2
    params:
    - n
- !assn;2
  export: false
  let: true
  lhs: !name;1
    value: main
  rhs: !func;1
    body: !block;2
      expr: null
      stmts:
      - !assn;2
        export: false
        let: true
        lhs: !name;1
          value: a
        rhs: !binary;1
          lhs: !table;2 {}
          op: '::'
          rhs: !name;1
            value: array
      - !assn;2
        export: false
        let: false
        lhs: !index;1
          lhs: !name;1
            value: a
          rhs: !int;1
            value: 0
        rhs: !int;1
          value: 10
      - !assn;2
        export: false
        let: false
        lhs: !index;1
          lhs: !name;1
            value: a
          rhs: !int;1
            value: 1
        rhs: !int;1
          value: 11
      - !assn;2
        export: false
        let: false
        lhs: !index;1
          lhs: !name;1
            value: a
          rhs: !int;1
            value: 2
        rhs: !int;1
          value: 12
      - !assn;2
        export: false
        let: false
        lhs: !index;1
          lhs: !name;1
            value: a
          rhs: !int;1
            value: 3
        rhs: !int;1
          value: 13
      - !call;1
        args:
        - !str;1
          value: 'keys from a:'
        catch: false
        func: !name;1
          value: print
      - !for;2
        body: !block;2
          expr: null
          stmts:
          - !call;1
            args:
            - !name;1
              value: x
            catch: false
            func: !name;1
              value: print
        funcs:
        - !method;1
          args: []
          catch: false
          lhs: !name;1
            value: a
          rhs: !str;1
            value: keys
        names:
        - x
      - !call;1
        args:
        - !str;1
          value: 'values from a:'
        catch: false
        func: !name;1
          value: print
      - !for;2
        body: !block;2
          expr: null
          stmts:
          - !call;1
            args:
            - !name;1
              value: x
            catch: false
            func: !name;1
              value: print
        funcs:
        - !method;1
          args: []
          catch: false
          lhs: !name;1
            value: a
          rhs: !str;1
            value: values
        names:
        - x
      - !call;1
        args:
        - !str;1
          value: 'doubled values from a:'
        catch: false
        func: !name;1
          value: print
      - !for;2
        body: !block;2
          expr: null
          stmts:
          - !call;1
            args:
            - !name;1
              value: x
            catch: false
            func: !name;1
              value: print
        funcs:
        - !call;1
          args:
          - !method;1
            args: []
            catch: false
            lhs: !name;1
              value: a
            rhs: !str;1
              value: values
          - !name;1
            value: double
          catch: false
          func: !index;1
            lhs: !name;1
              value: iter
            rhs: !str;1
              value: map
        names:
        - x
      - !assn;2
        export: false
        let: true
        lhs: !name;1
          value: b
        rhs: !method;1
          args:
          - !name;1
            value: double
          catch: false
          lhs: !name;1
            value: a
          rhs: !str;1
            value: map
      - !call;1
        args:
        - !str;1
          value: 'key/values from b:'
        catch: false
        func: !name;1
          value: print
      - !for;2
        body: !block;2
          expr: null
          stmts:
          - !call;1
            args:
            - !binary;1
              lhs: !binary;1
                lhs: !call;1
                  args:
                  - !name;1
                    value: k
                  catch: false
                  func: !name;1
                    value: tostr
                op: $
                rhs: !str;1
                  value: ' = '
              op: $
              rhs: !call;1
                args:
                - !name;1
                  value: v
                catch: false
                func: !name;1
                  value: tostr
            catch: false
            func: !name;1
              value: print
        funcs:
        - !method;1
          args: []
          catch: false
          lhs: !name;1
            value: b
          rhs: !str;1
            value: keys
        - !method;1
          args: []
          catch: false
          lhs: !name;1
            value: b
          rhs: !str;1
            value: values
        names:
        - k
        - v
    params: []
